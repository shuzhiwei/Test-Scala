/**
重点: scala的for循环

知识点
1 scala for循环的遍历  <-
2 scala 通用的化简规则: 在调用方式时, 如果方法的参数只有一个, 则. ()可以省略
**/
object Demo05 {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  
  val a1 = Array(1,2,3,4)                         //> a1  : Array[Int] = Array(1, 2, 3, 4)
  
  for(i <- a1){
  	println(i)                                //> 1
                                                  //| 2
                                                  //| 3
                                                  //| 4
  }
  
  //val a2 = 1.to(10)
  val a2 = 1 to 10                                //> a2  : scala.collection.immutable.Range.Inclusive = Range(1, 2, 3, 4, 5, 6, 7
                                                  //| , 8, 9, 10)
  for(i <- a2) println(i)                         //> 1
                                                  //| 2
                                                  //| 3
                                                  //| 4
                                                  //| 5
                                                  //| 6
                                                  //| 7
                                                  //| 8
                                                  //| 9
                                                  //| 10
  for(i <- 1 to 10) println(i)                    //> 1
                                                  //| 2
                                                  //| 3
                                                  //| 4
                                                  //| 5
                                                  //| 6
                                                  //| 7
                                                  //| 8
                                                  //| 9
                                                  //| 10
  //课堂练习: 用scala打印99乘法表
  for(i <- 1 to 9){
  	for(j <- 1 to i){
  		print(j + "*" + i +"=" + i*j + "\t")
  	}
  	println
  }                                               //> 1*1=1	
                                                  //| 1*2=2	2*2=4	
                                                  //| 1*3=3	2*3=6	3*3=9	
                                                  //| 1*4=4	2*4=8	3*4=12	4*4=16	
                                                  //| 1*5=5	2*5=10	3*5=15	4*5=20	5*5=25	
                                                  //| 1*6=6	2*6=12	3*6=18	4*6=24	5*6=30	6*6=36	
                                                  //| 1*7=7	2*7=14	3*7=21	4*7=28	5*7=35	6*7=42	7*7=49	
                                                  //| 1*8=8	2*8=16	3*8=24	4*8=32	5*8=40	6*8=48	7*8=56	8*8=64	
                                                  //| 1*9=9	2*9=18	3*9=27	4*9=36	5*9=45	6*9=54	7*9=63	8*9=72	9*9=81	
                                                  //| 
  //--scala支持在for(写条件语句)
  for(i <- 1 to 10; if i>6&&i%2==0){
  	println(i)                                //> 8
                                                  //| 10
  }
  for(i <- 1 to 10; if i>6;if i%2==0){
  	println(i)                                //> 8
                                                  //| 10
  }
  
  for(a <- 1 to 9; b<-1 to a; val seq=if(b==a) "\r\n" else "\t"){
  	print(b+"*"+a+"="+b*a+seq)                //> 1*1=1
                                                  //| 1*2=2	2*2=4
                                                  //| 1*3=3	2*3=6	3*3=9
                                                  //| 1*4=4	2*4=8	3*4=12	4*4=16
                                                  //| 1*5=5	2*5=10	3*5=15	4*5=20	5*5=25
                                                  //| 1*6=6	2*6=12	3*6=18	4*6=24	5*6=30	6*6=36
                                                  //| 1*7=7	2*7=14	3*7=21	4*7=28	5*7=35	6*7=42	7*7=49
                                                  //| 1*8=8	2*8=16	3*8=24	4*8=32	5*8=40	6*8=48	7*8=56	8*8=64
                                                  //| 1*9=9	2*9=18	3*9=27	4*9=36	5*9=45	6*9=54	7*9=63	8*9=72	9*9=81
  }
  for(a <- 1 to 9; b<-1 to a; val seq=if(b==a) "\r\n" else "\t"){
  	print(s"$b*$a=${b*a}$seq")                //> 1*1=1
                                                  //| 1*2=2	2*2=4
                                                  //| 1*3=3	2*3=6	3*3=9
                                                  //| 1*4=4	2*4=8	3*4=12	4*4=16
                                                  //| 1*5=5	2*5=10	3*5=15	4*5=20	5*5=25
                                                  //| 1*6=6	2*6=12	3*6=18	4*6=24	5*6=30	6*6=36
                                                  //| 1*7=7	2*7=14	3*7=21	4*7=28	5*7=35	6*7=42	7*7=49
                                                  //| 1*8=8	2*8=16	3*8=24	4*8=32	5*8=40	6*8=48	7*8=56	8*8=64
                                                  //| 1*9=9	2*9=18	3*9=27	4*9=36	5*9=45	6*9=54	7*9=63	8*9=72	9*9=81
  }
  
  //--声明一个map(key->value)
  val m1 = Map("tom"->23, "rose"->18, "jack"->20) //> m1  : scala.collection.immutable.Map[String,Int] = Map(tom -> 23, rose -> 18
                                                  //| , jack -> 20)
  m1("tom")                                       //> res0: Int = 23
  for(i <- m1) println(i)                         //> (tom,23)
                                                  //| (rose,18)
                                                  //| (jack,20)
  //掌握此种操作map的方式
  for((k,v)<-m1) println((k))                     //> tom
                                                  //| rose
                                                  //| jack
                                                  
  val a3 = Array(1,2,3,4)                         //> a3  : Array[Int] = Array(1, 2, 3, 4)
  //--将a3中的每个元素*2, 并返回到一个新的数组中
  //--for yield表达式可以达成这个要求
  //--这个表达式的作用: 遍历一个集合(collection), 返回一个新集合
  //--scala的集合是一个大的概念:
  //--Array,List,Map,Range,Set,Tuple
  //--即通过for yield, 遍历的是Array, 返回的就是Array
  //--即遍历的是什么类型, 返回的就是什么类型
  val a4 = for(i<-a3)yield{i*2}                   //> a4  : Array[Int] = Array(2, 4, 6, 8)
                                                  
  val l1 = List(1,2,3,4)                          //> l1  : List[Int] = List(1, 2, 3, 4)
  val l2 = for(i<-l1)yield{i*3}                   //> l2  : List[Int] = List(3, 6, 9, 12)
                                                  
                                                  
                                                  
}